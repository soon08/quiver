{
  "title": "IOS动画简介",
  "cells": [
    {
      "type": "text",
      "data": "<b>UIView可以通过改变属性来实现一些动画, UIView可以改变的属性有下面这些</b><div><ul><li>frame</li><li>bounds</li><li>center</li><li>transforms</li><li>alpha</li><li>backgroundColor</li><li>contentStrech</li></ul></div>"
    },
    {
      "type": "text",
      "data": "<span style=\"font-family: arial; font-size: 16.8px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; font-weight: bold; line-height: 26px; widows: 1;\">使用animateWithDuration来实现动画</span><div><span style=\"font-family: arial; font-size: 16.8px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; font-weight: bold; line-height: 26px; widows: 1;\"><div style=\"outline: 0px; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; font-weight: normal; line-height: normal;\"><span style=\"outline: 0px; font-weight: bold;\">（1）此方法共有5个参数：</span></div><ul style=\"outline: 0px; margin: 0px; padding: 0px; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; font-weight: normal; line-height: normal;\"><li style=\"outline: 0px; list-style: none;\">duration：动画从开始到结束的持续时间，单位是秒</li><li style=\"outline: 0px; list-style: none;\">delay：动画开始前等待的时间</li><li style=\"outline: 0px; list-style: none;\">options：动画执行的选项。里面可以设置动画的效果。可以使用UIViewAnimationOptions类提供的各种预置效果</li><li style=\"outline: 0px; list-style: none;\">anmations：动画效果的代码块</li><li style=\"outline: 0px; list-style: none;\">completion：动画执行完毕后执行的代码块</li></ul><span style=\"outline: 0px; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: normal;\">（2）UIView支持动画效果的属性</span><span style=\"font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; font-weight: normal; line-height: normal;\"></span><div style=\"outline: 0px; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; font-weight: normal; line-height: normal;\"><ul style=\"outline: 0px; margin: 0px; padding: 0px;\"><li style=\"outline: 0px; list-style: none;\">frame：此属性包含一个矩形，即边框矩形，此值确定了当前视图在其父视图坐标系中的位置与尺寸</li><li style=\"outline: 0px; list-style: none;\">bounds：也是矩形，边界矩形，它指的是视图在其自己的坐标系中的位置和尺寸，左上角坐标永远是(0,0)</li><li style=\"outline: 0px; list-style: none;\">center：确定视图的中心点在其父视图坐标系中的位置坐标。即定义当前视图在父视图中的位置</li><li style=\"outline: 0px; list-style: none;\">alpha：视图的透明度。（但视图完全透明时，不能响应触摸消息）</li><li style=\"outline: 0px; list-style: none;\">backgroundColor：背景色</li><li style=\"outline: 0px; list-style: none;\">transform：这是一种3×3的变化矩阵。通过这个矩阵我们可以对一个坐标系统进行缩放、平移、旋转以及这两者的任意组操作。</li></ul></div><span style=\"outline: 0px; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: normal;\">（3）Transform（变化矩阵）的四个常用的变换方法</span><span style=\"font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; font-weight: normal; line-height: normal;\"></span><div style=\"outline: 0px; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; font-weight: normal; line-height: normal;\"><ul style=\"outline: 0px; margin: 0px; padding: 0px;\"><li style=\"outline: 0px; list-style: none;\">CGAffineTransformMake()：返回变换矩阵</li><li style=\"outline: 0px; list-style: none;\">CGAffineTransformMakeTranslation()：返回平移变换矩阵</li><li style=\"outline: 0px; list-style: none;\">CGAffineTransformMakeScale()：返回缩放变换矩阵</li><li style=\"outline: 0px; list-style: none;\">CGAffineTransformMakeRotation()：返回旋转变换矩阵</li></ul></div><span style=\"outline: 0px; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: normal;\">（4）样例1：方块初始缩小为原始尺寸1/10。在1秒的动画中复原到完整大小，同时还伴随旋转效果。</span><span style=\"font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; font-weight: normal; line-height: normal;\">&nbsp;</span><br></span></div>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "import UIKit\n \nclass ViewController: UIViewController {\n     \n    //游戏方格维度\n    var dimension:Int = 4\n    //数字格子的宽度\n    var width:CGFloat = 50\n    //格子与格子的间距\n    var padding:CGFloat = 6\n     \n    //保存背景图数据\n    var backgrounds:Array<UIView>!\n     \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        self.backgrounds = Array<UIView>()\n        setupGameMap()\n        playAnimation()\n    }\n     \n    func setupGameMap()\n    {\n        var x:CGFloat = 50\n        var y:CGFloat = 150\n         \n        for i in 0..<dimension\n        {\n            print(i)\n            y = 150\n            for _ in 0..<dimension\n            {\n                //初始化视图\n                let background = UIView(frame:CGRectMake(x, y, width, width))\n                background.backgroundColor = UIColor.darkGrayColor()\n                self.view.addSubview(background)\n                //将视图保存起来，以备后用\n                backgrounds.append(background)\n                y += padding + width\n            }\n            x += padding+width\n        }\n    }\n     \n    func playAnimation()\n    {\n        for tile in backgrounds{\n            //先将数字块大小置为原始尺寸的 1/10\n            tile.layer.setAffineTransform(CGAffineTransformMakeScale(0.1,0.1))\n             \n            //设置动画效果，动画时间长度 1 秒。\n            UIView.animateWithDuration(1, delay:0.01,\n                options:UIViewAnimationOptions.TransitionNone, animations:\n                {\n                    ()-> Void in\n                    //在动画中，数字块有一个角度的旋转。\n                    tile.layer.setAffineTransform(CGAffineTransformMakeRotation(90))\n                },\n                completion:{\n                    (finished:Bool) -> Void in\n                    UIView.animateWithDuration(1, animations:{\n                        ()-> Void in\n                        //完成动画时，数字块复原\n                        tile.layer.setAffineTransform(CGAffineTransformIdentity)\n                    })\n            })\n        }\n    }\n     \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n}"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func playAnimation()\n{\n    for tile in backgrounds{\n        //先将数字块大小置为原始尺寸的 1/10\n        tile.layer.setAffineTransform(CGAffineTransformMakeScale(0.1,0.1))\n         \n        //设置动画效果，动画时间长度 1 秒。\n        UIView.animateWithDuration(1, delay:0.01,\n            options:UIViewAnimationOptions.TransitionNone, animations:\n            {\n                ()-> Void in\n                tile.layer.setAffineTransform(CGAffineTransformMakeScale(1,1))\n            },\n            completion:{\n                (finished:Bool) -> Void in\n                UIView.animateWithDuration(0.08, animations:{\n                    ()-> Void in\n                    tile.layer.setAffineTransform(CGAffineTransformIdentity)\n                })\n        })\n    }\n}"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func playAnimation()\n{\n    for tile in backgrounds{\n        tile.alpha = 0;\n         \n        //设置动画效果，动画时间长度 1 秒。\n        UIView.animateWithDuration(1, delay:0.01,\n            options:UIViewAnimationOptions.CurveEaseInOut, animations:\n            {\n                ()-> Void in\n            },\n            completion:{\n                (finished:Bool) -> Void in\n                UIView.animateWithDuration(1, animations:{\n                    ()-> Void in\n                    tile.alpha = 1\n                })\n        })\n    }\n}"
    },
    {
      "type": "text",
      "data": "<span style=\"outline: 0px; font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: normal; widows: 1; font-weight: bold;\"><big style=\"outline: 0px;\">使用beginAnimations和commitAnimations方法来实现动画</big></span><span style=\"font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: normal; widows: 1;\"></span><div style=\"outline: 0px; font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: normal; widows: 1;\"><ul style=\"outline: 0px; margin: 0px; padding: 0px;\"><li style=\"outline: 0px; list-style: none;\">beginAnimations：此方法开始一个动画块，调用commitAnimations结束一个动画块，并且动画块是允许嵌套的。</li><li style=\"outline: 0px; list-style: none;\">commitAnimations：此方法用于结束一个动画块，动画是在一个独立的线程中运行的，动画在生效时，所有应用程序不会中断。</li></ul></div><span style=\"font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: normal; widows: 1;\">在beginAnimations和commitAnimations中间的代码中，我们可以设置各种动画的属性。比如持续时间，使用哪种预置的动画效果等。</span><br>"
    },
    {
      "type": "text",
      "data": "<span style=\"font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; font-weight: bold; line-height: 26px; widows: 1;\">（1）淡入，淡出，移动，改变大小动画</span>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "//淡出动画\nUIView.beginAnimations(nil, context: nil)\nUIView.setAnimationDuration(2.0)\nimageView.alpha = 0.0\nUIView.commitAnimations()\n \n//淡入动画\nUIView.beginAnimations(nil, context: nil)\nUIView.setAnimationDuration(2.0)\nimageView.alpha = 1.0\nUIView.commitAnimations()\n \n//移动动画\nUIView.beginAnimations(nil, context: nil)\nUIView.setAnimationDuration(2.0)\nimageView.center = CGPointMake(250, 250)\nUIView.setAnimationCurve(UIViewAnimationCurve.EaseOut) //设置动画相对速度\nUIView.commitAnimations()\n \n//大小调整动画\nUIView.beginAnimations(nil, context: nil)\nUIView.setAnimationDuration(2.0)\nimageView.frame = CGRectMake(100,180,50,50)\nUIView.commitAnimations()"
    },
    {
      "type": "text",
      "data": "<div style=\"outline: 0px; font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: 26px; widows: 1;\"><span style=\"outline: 0px; font-weight: bold;\">（2）两个视图切换的过渡动画&nbsp;</span><br style=\"outline: 0px;\">&nbsp; UIViewAnimationTransition定义了5种过渡动画类型：</div><div style=\"outline: 0px; font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: 26px; widows: 1;\"><span class=\"Apple-tab-span\" style=\"outline: 0px; white-space: pre;\">\t</span>None：无过渡动画效果</div><div style=\"outline: 0px; font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: 26px; widows: 1;\"><span class=\"Apple-tab-span\" style=\"outline: 0px; white-space: pre;\">\t</span>FlipFromLeft：从左侧向右侧翻转</div><div style=\"outline: 0px; font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: 26px; widows: 1;\"><span class=\"Apple-tab-span\" style=\"outline: 0px; white-space: pre;\">\t</span>FlipFromRight：从右侧向左侧翻转</div><div style=\"outline: 0px; font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: 26px; widows: 1;\"><span class=\"Apple-tab-span\" style=\"outline: 0px; white-space: pre;\">\t</span>CurlUp：向上卷数翻页</div><div style=\"outline: 0px; font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; line-height: 26px; widows: 1;\"><span class=\"Apple-tab-span\" style=\"outline: 0px; white-space: pre;\">\t</span>CurlDown：向下翻页</div>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "import UIKit\n \nclass ViewController: UIViewController {\n     \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n       \n        //创建一个按钮，用来点击播放动画\n        let button:UIButton = UIButton(type:.System)\n        button.frame=CGRectMake(10, 20, 100, 30)\n        button.setTitle(\"播放动画\", forState:UIControlState.Normal)\n        button.addTarget(self,action:Selector(\"play\"),forControlEvents:.TouchUpInside)\n        self.view.addSubview(button);\n         \n        //添加两个红蓝视图\n        let redView:UIView = UIView(frame: CGRectMake(50,50,150,400))\n        redView.backgroundColor = UIColor.redColor()\n        self.view.insertSubview(redView, atIndex: 0)\n         \n        let blueView:UIView = UIView(frame: CGRectMake(50,50,150,400))\n        blueView.backgroundColor = UIColor.blueColor()\n        self.view.insertSubview(blueView, atIndex: 1)\n    }\n     \n    //切换视图并播放动画\n    func play(){\n        UIView.beginAnimations(nil, context: nil)\n        UIView.setAnimationDuration(3.0)\n        UIView.setAnimationTransition(.CurlUp, forView: self.view, cache: true)\n        self.view.exchangeSubviewAtIndex(1, withSubviewAtIndex: 0)\n        UIView.commitAnimations()\n    }\n     \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n}"
    },
    {
      "type": "text",
      "data": "<span style=\"font-family: arial; font-size: 14px; font-variant-ligatures: normal; font-variant-position: normal; font-variant-numeric: normal; font-variant-alternates: normal; font-variant-east-asian: normal; font-weight: bold; line-height: 26px; widows: 1;\">（3）页面或元件翻转效果</span>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "import UIKit\n \nclass ViewController: UIViewController {\n     \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n       \n        //创建一个按钮，用来点击播放动画\n        let button:UIButton = UIButton(type:.System)\n        button.frame=CGRectMake(10, 20, 100, 30)\n        button.setTitle(\"播放动画\", forState:UIControlState.Normal)\n        button.addTarget(self,action:Selector(\"play\"),forControlEvents:.TouchUpInside)\n        self.view.addSubview(button);\n    }\n     \n    //切换视图并播放动画\n    func play(){\n        //将整个主视图面板实现一个翻转效果\n        UIView.beginAnimations(\"animation\", context: nil)\n        UIView.setAnimationDuration(2)\n        UIView.setAnimationCurve(UIViewAnimationCurve.EaseInOut)\n        UIView.setAnimationTransition(.FlipFromLeft, forView: self.view, cache: false)\n        UIView.commitAnimations()\n    }\n     \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n}"
    }
  ]
}