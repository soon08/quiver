{
  "title": "数组压缩算法",
  "cells": [
    {
      "type": "text",
      "data": "问题背景：<div><ul><li>很多时候我们需要开辟一个大数组用于存储标志状态位</li><li>针对这个需求我们可以简单想到使用bitset</li><li>但是这里我们也可以使用数组</li></ul></div>"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "//我们要存储100个标志位，采用一个uint64位的数组\n//那么每个数组就可以存储64个标志位，\n//所以存储100个标志位只需要 Math.ceil(100 / 64) 个元素\n\nvar flags []uint64 = make([]uint64, 2, 2)\n\n//要想设置某一位标志，先要获取标志位在数组中的元素位置，再用二进制\n//如要设置第99个标志位，Math.ceil(99 / 64), 标志位在第二个元素中\n//获取标志位在第二个元素中的位，99 % 64 的余数即为位位置\n//设置标志位，利用移位操作和位或操作\nflags[Math.ceil(99 / 64)] = flags[Math.ceil(99 / 64)] | 1 << (99 % 64);"
    }
  ]
}