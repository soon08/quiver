{
  "title": "Docker安装部署",
  "cells": [
    {
      "type": "text",
      "data": "<ul><li>在Ubuntu中安装Docker<br></li><ul><li>docker对linux的内核有要求linux内核在3.8以上，一些老版本的linux 2.6也可以运行，但是结果会不同</li><ul><li>uname -a</li></ul><li>检查Device Mapper是否存在</li><ul><li>ls -l /sys/class/misc/device-mapper</li></ul><li>内核必须开启cgroup和命名空间</li><li>安装Ubuntu维护的版本</li><ul><li>sudo apt-get install docker.io</li><li>source /etc/bash_completion.d/docker.io</li></ul><li>安装Docker维护的版本</li><ul><li>curl -sSL https://get.docker.com &nbsp;| &nbsp;sudo sh</li></ul></ul><li>在MacOS中安装Docker</li><li>在centos6中安装Docker</li><ul><li>先安装EPEL</li><li>sudo yum -y install docker-io</li><li>sudo service docker start</li><li>sudo service docker enable</li></ul></ul><div><br></div>"
    },
    {
      "type": "text",
      "data": "安全问题<div><ul><li>docker用户组用于root用户相同的权限，所以Docker用户组应该只能谈价那些确实需要使用Docker的用户和程序</li></ul></div>"
    },
    {
      "type": "text",
      "data": "<b>使用非ROOT用户运行Docker</b><div><ol><li>sudo groupadd docker &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 添加名为docker的用户组</li><li>sudo gpasswd -a &nbsp;&lt;username&gt; docker &nbsp; 将用户添加到这个用户组中</li><li>sudo service docker restart &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 重启用户服务</li></ol></div>"
    },
    {
      "type": "text",
      "data": "<b>查看Docker信息</b><div><ul><li>docker version</li><li>docker info</li></ul></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "Usage: docker [OPTIONS] COMMAND [arg...]\n       docker [ --help | -v | --version ]\n\nA self-sufficient runtime for containers.\n\nOptions:\n\n  --config=~/.docker                                       Location of client config files\n  -D, --debug=false                                        Enable debug mode\n  -H, --host=[]                                            Daemon socket(s) to connect to\n  -h, --help=false                                         Print usage\n  -l, --log-level=info                                     Set the logging level\n  --tls=false                                              Use TLS; implied by --tlsverify\n  --tlscacert=~/.docker/machine/machines/default/ca.pem    Trust certs signed only by this CA\n  --tlscert=~/.docker/machine/machines/default/cert.pem    Path to TLS certificate file\n  --tlskey=~/.docker/machine/machines/default/key.pem      Path to TLS key file\n  --tlsverify=true                                         Use TLS and verify the remote\n  -v, --version=false                                      Print version information and quit\n\nCommands:\n    attach    Attach to a running container\n    build     Build an image from a Dockerfile\n    commit    Create a new image from a container's changes\n    cp        Copy files/folders between a container and the local filesystem\n    create    Create a new container\n    diff      Inspect changes on a container's filesystem\n    events    Get real time events from the server\n    exec      Run a command in a running container\n    export    Export a container's filesystem as a tar archive\n    history   Show the history of an image\n    images    List images\n    import    Import the contents from a tarball to create a filesystem image\n    info      Display system-wide information\n    inspect   Return low-level information on a container or image\n    kill      Kill a running container\n    load      Load an image from a tar archive or STDIN\n    login     Register or log in to a Docker registry\n    logout    Log out from a Docker registry\n    logs      Fetch the logs of a container\n    network   Manage Docker networks\n    pause     Pause all processes within a container\n    port      List port mappings or a specific mapping for the CONTAINER\n    ps        List containers\n    pull      Pull an image or a repository from a registry\n    push      Push an image or a repository to a registry\n    rename    Rename a container\n    restart   Restart a container\n    rm        Remove one or more containers\n    rmi       Remove one or more images\n    run       Run a command in a new container\n    save      Save an image(s) to a tar archive\n    search    Search the Docker Hub for images\n    start     Start one or more stopped containers\n    stats     Display a live stream of container(s) resource usage statistics\n    stop      Stop a running container\n    tag       Tag an image into a repository\n    top       Display the running processes of a container\n    unpause   Unpause all processes within a container\n    version   Show the Docker version information\n    volume    Manage Docker volumes\n    wait      Block until a container stops, then print its exit code"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "//查看Docker run命令的帮助\n\ndocker help run\n\nUsage:\tdocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\nRun a command in a new container\n\n  -a, --attach=[]                 Attach to STDIN, STDOUT or STDERR\n  --add-host=[]                   Add a custom host-to-IP mapping (host:ip)\n  --blkio-weight=0                Block IO (relative weight), between 10 and 1000\n  --cpu-shares=0                  CPU shares (relative weight)\n  --cap-add=[]                    Add Linux capabilities\n  --cap-drop=[]                   Drop Linux capabilities\n  --cgroup-parent=                Optional parent cgroup for the container\n  --cidfile=                      Write the container ID to the file\n  --cpu-period=0                  Limit CPU CFS (Completely Fair Scheduler) period\n  --cpu-quota=0                   Limit CPU CFS (Completely Fair Scheduler) quota\n  --cpuset-cpus=                  CPUs in which to allow execution (0-3, 0,1)\n  --cpuset-mems=                  MEMs in which to allow execution (0-3, 0,1)\n  -d, --detach=false              Run container in background and print container ID\n  --device=[]                     Add a host device to the container\n  --disable-content-trust=true    Skip image verification\n  --dns=[]                        Set custom DNS servers\n  --dns-opt=[]                    Set DNS options\n  --dns-search=[]                 Set custom DNS search domains\n  -e, --env=[]                    Set environment variables\n  --entrypoint=                   Overwrite the default ENTRYPOINT of the image\n  --env-file=[]                   Read in a file of environment variables\n  --expose=[]                     Expose a port or a range of ports\n  --group-add=[]                  Add additional groups to join\n  -h, --hostname=                 Container host name\n  --help=false                    Print usage\n  -i, --interactive=false         Keep STDIN open even if not attached\n  --ipc=                          IPC namespace to use\n  --kernel-memory=                Kernel memory limit\n  -l, --label=[]                  Set meta data on a container\n  --label-file=[]                 Read in a line delimited file of labels\n  --link=[]                       Add link to another container\n  --log-driver=                   Logging driver for container\n  --log-opt=[]                    Log driver options\n  --lxc-conf=[]                   Add custom lxc options\n  -m, --memory=                   Memory limit\n  --mac-address=                  Container MAC address (e.g. 92:d0:c6:0a:29:33)\n  --memory-reservation=           Memory soft limit\n  --memory-swap=                  Total memory (memory + swap), '-1' to disable swap\n  --memory-swappiness=-1          Tuning container memory swappiness (0 to 100)\n  --name=                         Assign a name to the container\n  --net=default                   Set the Network for the container\n  --oom-kill-disable=false        Disable OOM Killer\n  -P, --publish-all=false         Publish all exposed ports to random ports\n  -p, --publish=[]                Publish a container's port(s) to the host\n  --pid=                          PID namespace to use\n  --privileged=false              Give extended privileges to this container\n  --read-only=false               Mount the container's root filesystem as read only\n  --restart=no                    Restart policy to apply when a container exits\n  --rm=false                      Automatically remove the container when it exits\n  --security-opt=[]               Security Options\n  --sig-proxy=true                Proxy received signals to the process\n  --stop-signal=SIGTERM           Signal to stop a container, SIGTERM by default\n  -t, --tty=false                 Allocate a pseudo-TTY\n  -u, --user=                     Username or UID (format: <name|uid>[:<group|gid>])\n  --ulimit=[]                     Ulimit options\n  --uts=                          UTS namespace to use\n  -v, --volume=[]                 Bind mount a volume\n  --volume-driver=                Optional volume driver for the container\n  --volumes-from=[]               Mount volumes from the specified container(s)\n  -w, --workdir=                  Working directory inside the container"
    }
  ]
}