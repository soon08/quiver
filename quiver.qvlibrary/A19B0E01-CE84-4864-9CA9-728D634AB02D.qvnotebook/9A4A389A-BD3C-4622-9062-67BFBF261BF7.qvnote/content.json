{
  "title": "常用算法",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "function binary_search2(arr, low, high, key) {\n\tif(low > high)\n\t    return -1;\n\tvar mid = parseInt((low + high)/2);\n\tif(key == arr[mid])\n\t    return mid;\n\telse if(key > arr[mid])\n\t    return binary_search2(arr, mid+1, high, key);\n\telse if(key < arr[mid])\n        return binary_search2(arr, low, mid-1, key);\n}\n\nfunction binary_search(arr, key) {\n    var low = 0,\n        high = arr.length - 1;\n    while(low <= high){\n        var mid = parseInt((high + low) / 2);\n        if(key == arr[mid]){\n            return  mid;\n        }else if(key > arr[mid]){\n            low = mid + 1;\n        }else if(key < arr[mid]){\n            high = mid -1;\n        }\n    }\n    return -1;\n};\n\nfunction unique(arr){\n\tvar obj = {}\n\tvar data = []\n\tfor(var i in arr){\n\t    if(!obj[arr[i]]){\n\t        obj[arr[i]] = true;\n\t        data.push(arr[i]);\n\t\t}\n\t}\n\treturn data;\n}\n\nfunction findMaxDuplicateChar(str) {\n    if(str.length == 1) {\n        return str;\n    }\n    var charObj = {};\n    for(var i = 0; i < str.length; i++) {\n        if(!charObj[str.charAt(i)]) {\n            charObj[str.charAt(i)] = 1;\n        } else {\n            charObj[str.charAt(i)] += 1;\n        }\n    }\n    var maxChar = '',\n        maxValue = 1;\n    for(var k in charObj) {\n        if(charObj[k] >= maxValue) {\n            maxChar = k;\n            maxValue = charObj[k];\n        }\n    }\n    return maxChar + '：' + maxValue;\n}\n\n\nfunction randomString(n){\n\tvar str = 'abcdefghijklmnopqrstuvwxyz0123456789';\n\tvar tmp = '';\n\tfor(var i=0;i<n;i++)\n\t    tmp += str.charAt(Math.round(Math.random()*str.length));\n\treturn tmp;\n}\n\n\nfunction reverseString(str){\n\tvar tmp = '';\n\tfor(var i=str.length-1;i>=0;i--)\n\t\ttmp += str[i];\n\treturn tmp\n}\n\nfunction merge(left, right) {\n    var result = [],\n        il = 0,\n        ir = 0;\n\n    while (il < left.length && ir < right.length) {\n        if (left[il] < right[ir]) {\n            result.push(left[il++]);\n        } else {\n            result.push(right[ir++]);\n        }\n    }\n    while(left[il]){\n        result.push(left[il++]);\n\t}\n    while(right[ir]){\n        result.push(right[ir++]);\n    }\n    return result;\n}\n\nfunction quickSort(arr,l,r){\n\tif(l < r){\n\t\tvar i = l, j = r, x = arr[i];\n\t\twhile(i<j){\n\t\t\twhile(i<j && arr[j]>x)\n\t\t\t\tj--;\n\t\t\t\n\t\t\tif(i<j)\n\t\t\t\t//这里用i++，被换过来的必然比x小，赋值后直接让i自加，不用再比较，可以提高效率\n\t\t\t\tarr[i++] = arr[j];\n\t\t\t\n\t\t\twhile(i<j && arr[i]<x)\n\t\t\t\ti++;\n\t\t\t\n\t\t\tif(i<j)\n\t\t\t\t//这里用j--，被换过来的必然比x大，赋值后直接让j自减，不用再比较，可以提高效率\n\t\t\t\tarr[j--] = arr[i];\n\t\t}\n\t\tarr[i] = x;\n\t\t\n\t\tquickSort(arr, l, i-1);\n\t\tquickSort(arr, i+1, r);\n\t}\n}\n\nfunction bubbleSort(arr){\n\tvar i = j = 0;\n\tfor(i=1;i<arr.length;i++){\n\t\tfor(j=0;j<=arr.length-i;j++){\n\t\t\tvar temp = 0;\n\t\t\tif(arr[j]>arr[j+1]){\n\t\t\t\ttemp = arr[j];\n\t\t\t\tarr[j] = arr[j+1];\n\t\t\t\tarr[j+1] = temp;\n\t\t\t}\n\t\t}\n\t}\n}"
    }
  ]
}