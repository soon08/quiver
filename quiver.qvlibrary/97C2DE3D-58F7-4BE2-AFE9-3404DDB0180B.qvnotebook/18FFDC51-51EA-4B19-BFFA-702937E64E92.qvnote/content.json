{
  "title": "快速参考",
  "cells": [
    {
      "type": "text",
      "data": "常亮"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "const PI = 3.1415926\n\nconst (\n  Monday, Tuesday = 1,2  \n)\n\nconst(\n  B  = 1 << (10 * iota)\n  KB \n  MB\n  GB\n  TB\n  PB\n  EB\n  ZB\n  YB\n)"
    },
    {
      "type": "text",
      "data": "变量<br>"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "//var identifier [type] = value\n\nvar name string = \"sam\"\nvar age int = 20\nweight := 100.0\n\nvar userScore map[string]float = make(map[string]float)\n"
    },
    {
      "type": "text",
      "data": "数据类型"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "//int8 int16 int32 int63 int uint8 uint16 uint32 uint64 uint \n//rune(int32) byte(uint8)\n//bool\n//string\n//float32 float64\n//uintptr\n//complex64 complex128\n//map array slice chan\n//type Color int\ntype Color int\n\n//basic tyoe\nvar age uint8 = 90\nvar weight float32 = 100.0\nvar name string = \"sam\"\nvar gender bool = true\n\n//complex\nvar com complex64 = 5 + 6i //real(com) imag(com)\ncom = complex(10, 20)\n\n//charactor\nvar char rune = '\\u0041'\nvar ch byte = 65\n\n//map\nvar userScore map[string]float32 = make(map[string]float32)\n\n//array and slice\nvar array [2]int = [2]int{2,3}\nvar scores = [...]int{2,3,4}\nvar slice = score[:]\n\n//chan\nvar exit = make(<-int)"
    },
    {
      "type": "text",
      "data": "运算符"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "// + - * / %  += -= *= /= %=\n// == != > < >= <= !\n// && ||\n// & | ^ &^ << >>\n// <-\n\n//拼接字符串\nvar name = \"sam\"\nvar last = \"wiki\"\n\nvar fullName = name + \" \" + last\n\n//\n"
    },
    {
      "type": "text",
      "data": "字符串"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "//len() 所占字节\nvar name = \"sam\"\nvar byteCount int = len(name)\n\n//拼接 strings.Join() or bytes.Buffer\nvar fullname = \"synder\" + \" \" + \"keyes\"\n\n//转换\nvar str = strconv.Itoa(10)\n\n\nc := []byte(str)\n\nvar strings string = string(c)"
    },
    {
      "type": "text",
      "data": "随机数"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "//import \"math/rand\"\n//import \"time\"\n\nseed := int64(time.Now.Nanosecond())\nrand.Seed(seed)\nrand.Float32()\nrand.Int()"
    },
    {
      "type": "text",
      "data": "时间和日期"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "//time.Duration  代表时间间隔\n//time.Time\n\n//获取当前时间\nvar now time.Time = time.Now()\n\nnow.Day()\nnow.Minute()\nnow.Month()\nnow.Year()\n\n//定时器\ntime.After()\ntime.Ticker()\n\n//睡眠\ntime.Sleep(Duration d)"
    },
    {
      "type": "text",
      "data": "指针"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "var username string = \"sam\"\nvar ptr = &username\n"
    },
    {
      "type": "text",
      "data": "数组"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "var users [10]int = [10]int{1,2,3,4,5,5}\nvar scores = [...]int{1,2,3}\n\nvar points = [2][3]int"
    },
    {
      "type": "text",
      "data": "切片"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "var users [10]int = [10]int{1,2,3,4,5,5}\nvar slice = users[:]\n\nvar scores = []int{1,2,3}\nvar students = make([]int, 100)\n\nfrom := []int{1, 2, 3}\nto := make([]int, 10)\n\nn := copy(to, from)\nappend(to, 4, 5, 6)\n\nvar b []byte\nvar s string\nb = append(b, s...)"
    },
    {
      "type": "text",
      "data": "Map"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "var userscores map[string]float32 = make(map[string]float32)\n\nuserscores[\"sam\"] = 200"
    },
    {
      "type": "text",
      "data": "Chan"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "//chan for range\nfunc testChan(data chan int){\n\tfor val := range data {\n\t\tprintln(val)\n\t}\n}\n\n\nfunc main() {\n\tvar data = make(chan int, 2)\n\n\tgo testChan(data)\n\n\tdata <- 10\n\tdata <- 20\n\n\ttime.Sleep(time.Second * 10)\n}"
    },
    {
      "type": "text",
      "data": "控制结构"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "//if else continue break\n\nif a == 10 {\n  println(\"10\")\n}else if a == 20 {\n  println(\"20\")\n}else{\n  println(\"0\")\n}\n\n\nif a := 10; a > 10 {\n  println(a)\n}else{\n  println(a)\n}\n\n//switch\n\nswitch i := y {\n  case 1: \n    println(1)\n    \n  case 2:\n    println(2)\n    \n  case 3:\n    fallthrough\n    \n  default:\n    println(0)\n}\n\n\nswitch{\n  case i < 10:\n    f1()\n    \n  case i > 20:\n    f2()\n    \n  default:\n    f3()\n  \n}\n\nswitch a, b := x[i], y[j]; {\n    case a < b: t = -1\n    case a == b: t = 0\n    case a > b: t = 1\n}\n\n//for\nfor i := 0; i < 10; i++ {\n  println(i)\n}\n\nfor i < 10 {\n  i += 1\n  println(i)\n}\n\nvar i int = 0\n\nfor{\n  if i > 10 {\n    return\n  }\n  \n  i += 1\n}\n\n\n//for range\nfor index, value := range \"name\" {\n\t\tprintln(index, value)\n\t}\n\nfor index, value := range [10]int{10}{\n\tprintln(index, value)\n}\n\nvar userScores = make(map[string]float32)\n\nuserScores[\"sam\"] = 20\n\nfor key, val := range userScores{\n\tprintln(key, val)\n}\n\nvar userScore = map[string]float32{\n\t\t\"sam\": 20,\n\t\t\"wiki\": 230,\n}\n\nfor key, val := range userScore {\n\tprintln(key, val)\n}"
    },
    {
      "type": "text",
      "data": "函数"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "//basic func\nfunc String(number int) string{\n  return \n}\n\n//type func\ntype Stringer func(int) string\n\n//mutil return\nfunc string() (int, int) {\n  return 1,2\n}\n\n//change args\nfunc Join(str string, args ...string) string {\n  var result = \"\"\n  \n  for _, val := range args {\n    retult += args + str\n  }\n  \n  return result\n}\n\n//return func\nfunc Adder(a int) func(b int) int {\n  return func(b int) int {\n    return a + b\n  }\n}\n\n//内置函数\n//close \n//len 数组 字符串 切片 map 和管道 长度或者数量\n//cap 数组 字符串 切片 map 和管道 容量\n//new \n//make \n//copy append 复制和链接切片\n//panic recover 用于错误处理\n//print println\n//complex real imag"
    },
    {
      "type": "text",
      "data": "结构和方法"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "type Car struct {\n  name string\n}\n\nfunc (car Car) Stop(){\n  println(\"stop\")\n}\n\nfunc (car *Car) Run(){\n  println(\"run\")\n}\n\n\nvar car = new(Car)\ncar.name = \"sam\"\n\nvar samCar = Car{name:\"sam\"}\n"
    },
    {
      "type": "text",
      "data": "接口"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "type Reader interface {\n  Read(bytes []byte) int\n}\n\n"
    },
    {
      "type": "text",
      "data": "类型断言"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "// val.(T)\ntype Stringer interface {\n    String() string\n}\n\nif sv, ok := v.(Stringer); ok {\n    fmt.Printf(\"v implements String(): %s\\n\", sv.String()) // note: sv, not v\n}\n\n//switch\nswitch val.(type) {\n  case *Car : \n    println(\"*Car\")\n    \n  default:\n    println(\"none\")\n}"
    },
    {
      "type": "text",
      "data": "反射"
    },
    {
      "type": "code",
      "language": "golang",
      "data": ""
    },
    {
      "type": "text",
      "data": "包"
    },
    {
      "type": "code",
      "language": "golang",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}