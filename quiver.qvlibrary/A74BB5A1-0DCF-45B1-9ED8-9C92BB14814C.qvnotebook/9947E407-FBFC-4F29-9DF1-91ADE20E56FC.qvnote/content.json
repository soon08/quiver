{
  "title": "Docker镜像",
  "cells": [
    {
      "type": "text",
      "data": "<b>Docker镜像的基础知识</b>"
    },
    {
      "type": "text",
      "data": "<div><font color=\"#000000\" face=\"Arial\"><img src=\"quiver-image-url/4D7D81E64A4FC07507322DC372EBDDF2.jpg\"><br></font></div><div><font color=\"#000000\" face=\"Arial\"><span style=\"line-height: 25.2px; widows: 1;\">Docker 镜像是 Docker 容器运行时的只读模板，每一个镜像由一系列的层 (layers) 组成。Docker 使用 UnionFS 来将这些层联合到单独的镜像中。UnionFS 允许独立文件系统中的文件和文件夹(称之为分支)被透明覆盖，形成一个单独连贯的文件系统。正因为有了这些层的存在，Docker 是如此的轻量。当你改变了一个 Docker 镜像，比如升级到某个程序到新的版本，一个新的层会被创建。因此，不用替换整个原先的镜像或者重新建立(在使用虚拟机的时候你可能会这么做)，只是一个新 的层被添加或升级了。现在你不用重新发布整个镜像，只需要升级，层使得分发 Docker 镜像变得简单和快速。</span><br></font></div><div><span style=\"line-height: 25.2px; widows: 1;\"><font color=\"#000000\" face=\"Arial\"><br></font></span></div><font color=\"#000000\" face=\"Arial\">什么是镜像</font><div><ul><li><font color=\"#000000\" face=\"Arial\">Docker镜像由文件系统叠加而成</font></li><ul><li><font color=\"#000000\" face=\"Arial\">最底端是一个引导文件系统 bootfs</font></li><li><font color=\"#000000\" face=\"Arial\">第二层是root文件系统rootfs 可以是一种或多种操作系统</font></li></ul><li><font color=\"#000000\" face=\"Arial\">一个镜像可以放在另一个镜像的顶部</font></li><ul><li><font color=\"#000000\" face=\"Arial\">位于下面的镜像称为父镜像</font></li><li><font color=\"#000000\" face=\"Arial\">最底部的镜像称为基础镜像</font></li></ul><li><font color=\"#000000\" face=\"Arial\">本地镜像都保存在Docker宿主机的/var/lib/docker目录下</font></li><li><font color=\"#000000\" face=\"Arial\">Docker Registry是开源的，你也可以运行自己的私有Registry</font></li><li><font color=\"#000000\" face=\"Arial\">镜像可以带有标签</font></li><ul><li><font color=\"#000000\" face=\"Arial\">如Ubuntu有很多版本，每一个版本可以带一个标签</font></li><li><font color=\"#000000\" face=\"Arial\">docker run -it --name container ubuntu:12.04 /bin/bash</font></li></ul><li><font color=\"#000000\" face=\"Arial\">用户的仓库命名</font></li><ul><li><font color=\"#000000\" face=\"Arial\">用户名</font></li><li><font color=\"#000000\" face=\"Arial\">仓库名</font></li></ul><li><font color=\"#000000\" face=\"Arial\">执行docker run时，如何本地没有相应的镜像，docker会先从Docker Hub下载该镜像，如果没有指定标签，那么Docker会自动下载latest标签的镜像</font></li></ul></div>"
    },
    {
      "type": "text",
      "data": "<ul><li>docker search &lt;镜像名称&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 搜索镜像</li><li>docker pull &lt;镜像名&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 下载镜像</li><li>docker push &lt;镜像名&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 推送镜像</li><li>docker rmi &lt;镜像名称|镜像ID&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;删除Docker镜像</li><li>docker images &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;列出镜像列表</li><ul><li>-f &nbsp;筛选</li><li>-a 所有</li><li>-q 只显示镜像的VID</li></ul><li>docker images &lt;镜像名称&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;只查看某个镜像的内容</li><li>docker history &nbsp;&lt;镜像名称&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;显示一个镜像的历史</li><li>docker save &lt;镜像名称&gt; -o &lt;路径&gt; &nbsp; &nbsp; &nbsp; &nbsp;保存镜像到一个tar包</li><li>docker load -i &lt;路径&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;加载一个tar格式的镜像</li><li>docker inspect 容器名|镜像名 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 查看docker镜像和容器信息</li><li>docker import &nbsp;&lt;镜像名&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 将Dockerf镜像保存到tar文件</li><li>docker export &nbsp;&lt;镜像名&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 将tar文件加载为Docker镜像</li></ul>"
    },
    {
      "type": "text",
      "data": "构建自己的镜像<div><ul><li><span style=\"font-family: Menlo; font-size: 18px;\">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span>&nbsp; 基于基础镜像构建自己的镜像<br></li><ul><li>运行一个容器</li><li>在容器中进行修改</li><li>提交容器的修改到镜像</li></ul><li><span style=\"font-family: Menlo; font-size: 18px;\">docker build [OPTIONS] PATH | URL | - &nbsp;基于Dockerfile构建镜像</span><br><p style=\"margin: 0px; font-size: 18px; line-height: normal; font-family: Menlo;\"></p></li><ul><li><font face=\"Menlo\" size=\"4\">Dockerfile内容</font></li><ul><li><font face=\"Menlo\" size=\"4\">mkdir web</font></li><li><font face=\"Menlo\" size=\"4\">cd web</font></li><li><font face=\"Menlo\" size=\"4\">touch Dockerfile</font></li><li><font face=\"Menlo\" size=\"4\">每条指令如FROM必须为大写字母</font></li><li><font face=\"Menlo\" size=\"4\">指令会从上到下依次执行</font></li></ul><li><font face=\"Menlo\" size=\"4\">构建流程</font></li><ul><li><font face=\"Menlo\" size=\"4\">Docker从基础镜像运行一个容器</font></li><li><font face=\"Menlo\" size=\"4\">执行一条指令，对容器进行修改</font></li><li><font face=\"Menlo\" size=\"4\">执行类似于Docker commit的操作，提交一个新的镜像</font></li><li><font face=\"Menlo\" size=\"4\">Docker再基于刚提交的镜像运行一个容器</font></li><li><font face=\"Menlo\" size=\"4\">执行Dockerfile中的下一条指令，直到所有指令执行完毕</font></li></ul></ul><li><font face=\"Menlo\" size=\"4\">如何共享和发布镜像</font></li><ul><li><font face=\"Menlo\" size=\"4\">发布到Docker hub</font></li><ul><li><font face=\"Menlo\" size=\"4\">注册账户</font></li><li><font face=\"Menlo\" size=\"4\">docker login 登陆到镜像仓库</font></li></ul><li><font face=\"Menlo\" size=\"4\">发布到私有镜像仓库</font></li></ul></ul><p style=\"margin: 0px; font-size: 18px; line-height: normal; font-family: Menlo;\"></p><blockquote style=\"margin-left: 40px; border: none; padding-right: 0px; padding-left: 0px;\"></blockquote></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "#Version:0.0.1\nFROM ubuntu:14.04\nMAINTAINER synder \"812256717@qq.com\"\nRUN apt-get update\nRUN apt-get install -y nginx\nEXPOSE 80"
    }
  ]
}